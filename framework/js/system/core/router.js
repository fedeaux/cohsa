// Generated by CoffeeScript 1.4.0
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  this.Router = (function() {

    Router._routes = [];

    function Router() {
      this.route = __bind(this.route, this);

      this.get_route = __bind(this.get_route, this);

      this.get_interface_bindings = __bind(this.get_interface_bindings, this);

      this.parse_routes = __bind(this.parse_routes, this);
      this.debug = is_debug('router');
      this.routes = {};
      this.parse_routes();
      this.global_completes = [Navigation.navigation_complete];
      this.global_befores = [Form.init, layout.global_adjustments];
    }

    Router.add = function(routes) {
      return Router._routes.push(routes);
    };

    Router.prototype.parse_routes = function() {
      var func, name, route, _i, _len, _ref, _results;
      _ref = Router._routes;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        func = _ref[_i];
        _results.push((function() {
          var _ref1, _results1;
          _ref1 = func();
          _results1 = [];
          for (name in _ref1) {
            route = _ref1[name];
            _results1.push(this.routes[name] = route);
          }
          return _results1;
        }).call(this));
      }
      return _results;
    };

    Router.prototype.def_html = function(route) {
      var f;
      try {
        f = eval('JSV.' + route);
        if (f != null) {
          return f();
        }
      } catch (error) {
        return '';
      }
    };

    Router.prototype.get_interface_bindings = function(route) {
      var f;
      try {
        f = eval('InterfaceBindings.' + route);
        if (f != null) {
          return f;
        }
      } catch (error) {
        return null;
      }
    };

    Router.prototype.get_route = function(route) {
      var content, interface_bindings;
      if (this.routes[route] == null) {
        content = ContentFactory.make({}, this.def_html(route));
      } else {
        content = ContentFactory.make(this.routes[route], this.def_html(route));
      }
      interface_bindings = this.get_interface_bindings(route);
      if (interface_bindings != null) {
        content.complete.push(interface_bindings);
      }
      return content;
    };

    Router.prototype.route = function(route, back, refresh) {
      var content;
      if (back == null) {
        back = false;
      }
      if (refresh == null) {
        refresh = false;
      }
      if (this.debug) {
        console.log('[R] route:', route);
      }
      content = this.get_route(route);
      if (back) {
        content.context = 'back';
      } else if (refresh) {
        content.context = 'refresh';
      }
      Array.prototype.push.apply(content.complete, this.global_completes);
      Array.prototype.push.apply(content.before, this.global_befores);
      return content;
    };

    return Router;

  }).call(this);

}).call(this);
