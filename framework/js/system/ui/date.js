// Generated by CoffeeScript 1.4.0
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  this.DatePicker = (function() {

    DatePicker.days_per_month = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];

    function DatePicker(input, args) {
      var base_date, default_args, initial_value, millis_in_one_year, name, value;
      this.input = input;
      this.args = args != null ? args : {};
      this.select_changed = __bind(this.select_changed, this);

      this.update_input = __bind(this.update_input, this);

      this.set_date = __bind(this.set_date, this);

      this.container = this.input.parent();
      this.my_id = unique_id();
      initial_value = this.input.val();
      if (this.container.hasClass('date_select_parsed')) {
        return;
      }
      this.container.addClass('date_select_parsed');
      base_date = this.args.base_date || new Date;
      millis_in_one_year = 3600000 * 24 * 365;
      default_args = {
        base_date: base_date,
        min_date: new Date(base_date.getTime() - (millis_in_one_year * 100)),
        max_date: new Date(base_date.getTime() + (millis_in_one_year * 10))
      };
      for (name in default_args) {
        value = default_args[name];
        this.args[name] = this.args[name] || value;
      }
      this.change_dom();
      this.set_date(initial_value);
    }

    DatePicker.prototype.change_dom = function() {
      var container_class;
      container_class = 'date_selector_container_' + this.my_id;
      this.container.addClass(container_class);
      this.input.after(JSV.date.picker(this.args, this.make_date_select_args()));
      this.input.hide();
      this.select_year = $('.date_select_year', this.container);
      this.select_month = $('.date_select_month', this.container);
      this.select_day = $('.date_select_day', this.container);
      this.wrapper_year = $('.date_selector_wrapper_years', this.container);
      this.wrapper_month = $('.date_selector_wrapper_months', this.container);
      this.wrapper_day = $('.date_selector_wrapper_days', this.container);
      $('.' + container_class + ' .date_select').live('change', this.select_changed);
      return this.select_changed();
    };

    DatePicker.prototype.set_date = function(date) {
      var _date;
      _date = break_date(date);
      if (_date != null) {
        this.set_current_year(_date.year);
        this.set_current_month(_date.month);
        return this.set_current_day(_date.day);
      }
    };

    DatePicker.prototype.update_input = function() {
      this.update_selected_values();
      this.input.val($.datepicker.formatDate('yy-mm-dd', this.current_date));
      if (this.args.date_changed) {
        return this.args.date_changed(this.current_date);
      }
    };

    DatePicker.prototype.select_changed = function(e) {
      this.check_consistence();
      return this.update_input();
    };

    DatePicker.prototype.update_selected_values = function() {
      this.current_year = parseInt(this.select_year.val(), 10);
      this.current_month = parseInt(this.select_month.val(), 10);
      this.current_day = parseInt(this.select_day.val(), 10);
      return this.current_date = new Date(this.current_year, this.current_month - 1, this.current_day);
    };

    DatePicker.prototype.update_month_options = function(range) {
      this.wrapper_month.html(JSV.date.months(this.args, range));
      return this.select_month = $('.date_select_month', this.wrapper_month);
    };

    DatePicker.prototype.update_day_options = function(range) {
      this.wrapper_day.html(JSV.date.days(this.args, range));
      return this.select_day = $('.date_select_day', this.wrapper_day);
    };

    DatePicker.prototype.check_consistence = function() {
      this.update_selected_values();
      if (this.current_year === this.args.min_date.getFullYear()) {
        return this.check_month_consistency('min');
      } else if (this.current_year === this.args.max_date.getFullYear()) {
        return this.check_month_consistency('max');
      } else {
        return this.check_month_consistency();
      }
    };

    DatePicker.prototype.check_month_consistency = function(year_at) {
      var max_month, min_month;
      min_month = this.args.min_date.getMonth() + 1;
      max_month = this.args.max_date.getMonth() + 1;
      if (year_at === 'min') {
        this.update_month_options({
          min: min_month - 1,
          max: 11
        });
        if (this.current_month <= min_month) {
          this.set_current_month(min_month);
          this.check_day_consistency('min');
          return;
        }
      } else if (year_at === 'max') {
        this.update_month_options({
          min: 0,
          max: max_month - 1
        });
        if (this.current_month >= max_month) {
          this.set_current_month(max_month);
          this.check_day_consistency('max');
          return;
        }
      } else {
        this.update_month_options({
          min: 0,
          max: 11
        });
      }
      this.set_current_month(this.current_month);
      return this.check_day_consistency();
    };

    DatePicker.prototype.max_month_day = function() {
      return DatePicker.days_per_month[this.current_month];
    };

    DatePicker.prototype.check_day_consistency = function(month_at) {
      var actual_max_day, max_day, max_for_month, min_day;
      min_day = this.args.min_date.getDate();
      max_day = this.args.max_date.getDate();
      max_for_month = this.max_month_day();
      actual_max_day = Math.min(max_day, max_for_month);
      if (month_at === 'min') {
        this.update_day_options({
          min: min_day,
          max: max_for_month
        });
        if (this.current_day <= min_day) {
          this.set_current_day(min_day);
          return;
        }
      } else if (month_at === 'max') {
        this.update_day_options({
          min: 1,
          max: actual_max_day
        });
        if (this.current_day >= actual_max_day) {
          this.set_current_day(actual_max_day);
          return;
        }
      } else {
        this.update_day_options({
          min: 1,
          max: max_for_month
        });
      }
      return this.set_current_day(this.current_day);
    };

    DatePicker.prototype.set_current_year = function(val) {
      this.select_year.val(val);
      return this.current_year = parseInt(this.select_year.val());
    };

    DatePicker.prototype.set_current_month = function(val) {
      this.select_month.val(pad(val, 2));
      return this.current_month = parseInt(this.select_month.val());
    };

    DatePicker.prototype.set_current_day = function(val) {
      this.select_day.val(pad(val, 2));
      return this.current_day = parseInt(val);
    };

    DatePicker.prototype.make_date_select_args = function() {
      return {
        months: {
          min: 0,
          max: 11
        },
        days: {
          min: 1,
          max: 31
        },
        years: {
          min: this.args.min_date.getFullYear(),
          max: this.args.max_date.getFullYear()
        }
      };
    };

    return DatePicker;

  })();

}).call(this);
