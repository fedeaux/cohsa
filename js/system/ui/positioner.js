// Generated by CoffeeScript 1.4.0
(function() {

  this.Positioner = {
    configure: function() {},
    get_base_offset: function(element, pos_arg) {
      var base_offset, height, width;
      base_offset = element.offset();
      width = element.width();
      height = element.height();
      if (pos_arg[0] === 'm') {
        base_offset.top += height / 2;
      } else if (pos_arg[0] === 'b') {
        base_offset.top += height;
      }
      if (pos_arg[1] === 'c') {
        base_offset.left += width / 2;
      } else if (pos_arg[1] === 'r') {
        base_offset.left += width;
      }
      return base_offset;
    },
    get_steps: function(element) {
      return {
        h_step: element.width() / 2,
        v_step: element.height() / 2
      };
    },
    get_final_offset: function(base_offset, steps, position) {
      var add_left, add_top, n_bottons, n_centers, n_lefts, n_middles, n_rights, n_tops, _position;
      _position = position.join();
      n_rights = _position.split('r').length - 1;
      n_centers = _position.split('c').length - 1;
      n_lefts = _position.split('l').length - 1;
      n_tops = _position.split('t').length - 1;
      n_middles = _position.split('m').length - 1;
      n_bottons = _position.split('b').length - 1;
      add_top = (n_bottons - n_tops - 1) * steps.v_step;
      add_left = (n_rights - n_lefts - 1) * steps.h_step;
      return {
        top: base_offset.top + add_top,
        left: base_offset.left + add_left
      };
    },
    set_position: function(element, relative_to, position) {
      var base_offset, final_offset, steps;
      base_offset = this.get_base_offset(relative_to, position[0]);
      steps = this.get_steps(element);
      final_offset = this.get_final_offset(base_offset, steps, position.slice(1, position.length));
      return element.offset(final_offset);
    },
    get_new_offset: function(element, relative_to, position) {
      if (this.is_side(position)) {
        return this.get_side_position(element, relative_to, position);
      }
    },
    get_side_position: function(element, relative_to, position) {
      if (this.is_bottom_side(position)) {
        return this.get_bottom_side_position(element, relative_to, position);
      }
    },
    get_bottom_side_position: function(element, relative_to, position) {
      var left, relative_offset, top;
      relative_offset = relative_to.offset();
      left = relative_offset.left + relative_to.width() / 2 - element.width() / 2;
      if (this.is_inset(position)) {
        top = relative_offset.top + relative_to.height() - element.height();
      }
      return {
        left: left,
        top: top
      };
    },
    is_inset: function(position) {
      return position[1] === 'i';
    },
    is_bottom_side: function(position) {
      return position[0] === 'b';
    },
    is_side: function(position) {
      return position[0].length === 1;
    },
    get_relative_to: function(element) {
      var relative_to_selector;
      relative_to_selector = element.attr('data-positionable-relative-to');
      if (relative_to_selector != null) {
        return $(relative_to_selector);
      }
      return element.parent();
    },
    normalize_pos_arg: function(pos_arg) {
      if (pos_arg.length === 1) {
        if (pos_arg === 'l' || pos_arg === 'r' || pos_arg === 'c') {
          return 'm' + pos_arg;
        }
        return pos_arg + 'c';
      }
      return pos_arg;
    },
    normalize_pos_args: function(element) {
      var pos_arg, _i, _len, _ref, _results;
      _ref = element.attr('data-positionable').split(' ');
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        pos_arg = _ref[_i];
        _results.push(this.normalize_pos_arg(pos_arg));
      }
      return _results;
    },
    parse_positionable_objects: function() {
      return this.position_objects();
    },
    position_objects: function(selector) {
      var _this = this;
      if (selector == null) {
        selector = '[data-positionable]';
      }
      return $(selector).each(function(index, _element) {
        var element;
        element = $(_element);
        return _this.set_position(element, _this.get_relative_to(element), _this.normalize_pos_args(element));
      });
    }
  };

}).call(this);
