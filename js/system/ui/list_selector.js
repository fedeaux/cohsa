// Generated by CoffeeScript 1.4.0
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  this.ListSelector = (function() {

    function ListSelector(input, args, options) {
      var default_args, id, list, list_wrapper, name, option, value, _class, _i, _len,
        _this = this;
      this.args = args;
      this.get = __bind(this.get, this);

      this.normalize_options = __bind(this.normalize_options, this);

      this.make_option_obj = __bind(this.make_option_obj, this);

      this.close_list_selector = __bind(this.close_list_selector, this);

      this.toggle_selection = __bind(this.toggle_selection, this);

      if (ListSelector.show_if_exists(input)) {
        return;
      }
      id = 'list-selector-container-' + unique_id();
      input.attr('data-list-selector-id', '#' + id);
      input.blur();
      default_args = {
        add_class: '',
        container: 'body',
        filter: false,
        mode: 'multiple',
        display: '.list-selector-display',
        value: '.list-selector-values',
        close_politics: 'fade',
        sort: false,
        html_controller: '<div class="actions width_full list-selector-controller">\
          <div class="width_filler ok list-selector-select-button">\
             SELECT\
          </div>\
        </div>'
      };
      if (this.args == null) {
        this.args = JSON.parse(input.siblings('.list-selector-args-source').html());
      }
      if (options == null) {
        options = this.normalize_options(JSON.parse(input.siblings('.list-selector-options-source').html()));
      }
      if (this.args.sort) {
        options = this.sort(options);
      }
      for (name in default_args) {
        value = default_args[name];
        this.args[name] = this.args[name] || value;
      }
      list = $('<ul class="' + this.args.add_class + ' list-selector">\
              </ul>');
      list_wrapper = $('<div class="list-selector-list-wrapper scroll-y">\
                      </div>');
      this.list_selector = $('<div id="' + id + '"\
                          class="list-selector-container">\
                       </div>');
      list_wrapper.append(list);
      this.list_selector.append(list_wrapper);
      for (_i = 0, _len = options.length; _i < _len; _i++) {
        option = options[_i];
        if ((option.selected != null) && option.selected) {
          _class = 'selected';
        } else if ((option.disabled != null) && option.disabled === true) {
          _class = 'disabled';
        } else {
          _class = 'unselected';
        }
        list.append($('<li\
                         id="list-selector-value-' + option.value + '"\
                         data-list-selector-value="' + option.value + '"\
                         data-list-selector-display="' + option.display + '"\
                         class="list-selector-state-' + _class + ' list-selector-option" >' + '<span class="list-selector-option-selected">' + option.html_selected + '</span>' + '<span class="list-selector-option-unselected">' + option.html_unselected + '</span>' + '</li>'));
      }
      this.list_selector.append(this.args.html_controller);
      $(this.args.container).append(this.list_selector);
      if (is_function(this.args.on_create)) {
        this.args.on_create();
      }
      layout.width_full();
      if (this.args.onSelect == null) {
        this.args.onSelect = function(values, displays) {
          $(_this.args.value).val(values.toString());
          if (displays.length > 0) {
            $(_this.args.display).val(displays.reduceRight(function(x, y) {
              return x + ", " + y;
            }));
            return $(_this.args.display).addClass('input_active').removeClass('input_blured');
          } else {
            $(_this.args.display).val($(_this.args.display).attr('data-placeholder'));
            return $(_this.args.display).addClass('input_blured').removeClass('input_active');
          }
        };
      }
      if (this.args.onClose == null) {
        this.args.onClose = this.close_list_selector;
      }
      $('.list-selector-option', this.list_selector).click(this.toggle_selection);
      $('.list-selector-select-button', this.list_selector).click(function() {
        var displays, values;
        values = [];
        displays = [];
        $('.list-selector-state-selected', _this.list_selector).each(function() {
          values.push($(this).attr('data-list-selector-value'));
          return displays.push($(this).attr('data-list-selector-display'));
        });
        _this.args.onSelect(values, displays);
        return _this.args.onClose(_this.list_selector);
      });
      $('.list-selector-close-button', this.list_selector).click(function() {
        return _this.args.onClose(_this.list_selector);
      });
    }

    ListSelector.show_if_exists = function(input) {
      var ls;
      ls = $(input.attr('data-list-selector-id'));
      if (ls.length === 1) {
        ls.fadeIn();
        return true;
      }
    };

    ListSelector.prototype.toggle_selection = function(e) {
      var t;
      t = ensure($(e.target), '.list-selector-option');
      if (t.is('.list-selector-state-disabled')) {
        return false;
      }
      if (this.args.mode === 'single') {
        $('.list-selector-state-selected', t.parent()).removeClass('list-selector-state-selected').addClass('list-selector-state-unselected');
      }
      t.toggleClass('list-selector-state-selected list-selector-state-unselected');
      e.preventDefault();
      e.stopPropagation();
      return false;
    };

    ListSelector.prototype.close_list_selector = function(ls) {
      if (this.args.close_politics === 'fade') {
        return ls.fadeOut();
      } else {
        return ls.remove();
      }
    };

    ListSelector.prototype.make_option_obj = function(arg) {
      var key, val, _opt, _ref;
      _opt = {
        html_selected: '<span>' + arg + '</span>',
        html_unselected: '<span>' + arg + '</span>',
        selected: __indexOf.call(this.args.previously_selected_values, arg) >= 0,
        value: arg,
        display: arg
      };
      if (!is_string(arg)) {
        for (key in arg) {
          val = arg[key];
          if ((_ref = _opt[key]) == null) {
            _opt[key] = val;
          }
        }
      }
      return _opt;
    };

    ListSelector.prototype.normalize_options = function(_options) {
      var d, options, v;
      this.args.previously_selected_values = (function() {
        var _i, _len, _ref, _results;
        _ref = $(this.args.value).val().split(',');
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          v = _ref[_i];
          _results.push($.trim(v));
        }
        return _results;
      }).call(this);
      options = (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = _options.length; _i < _len; _i++) {
          d = _options[_i];
          _results.push(this.make_option_obj(d));
        }
        return _results;
      }).call(this);
      if (options == null) {
        options = [];
      }
      return options;
    };

    ListSelector.prototype.get = function() {
      return this.list_selector;
    };

    ListSelector.prototype.sort = function(options) {
      if (this.args.sort === 'disabled_last') {
        options.sort(function(a, b) {
          if (a.disabled && !b.disabled) {
            return 1;
          } else if (!a.disabled && b.disabled) {
            return -1;
          }
          return 0;
        });
      }
      return options;
    };

    return ListSelector;

  })();

}).call(this);
