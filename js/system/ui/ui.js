// Generated by CoffeeScript 1.4.0
(function() {
  var position_labels, positioner, _placeholder_styling,
    _this = this;

  window.layout = {
    debug: is_debug('layout'),
    call_once: function() {
      _this.scrollers = {};
      layout.add_scroller('.content');
      layout.add_scroller('.inner_content');
      return layout.add_scroller('.scrollable');
    },
    global_adjustments: function() {
      var slow;
      slow = true;
      layout.adjust_image_size('.size_adjustable');
      layout.checkbox();
      Scalator.parse_scallable_objects();
      layout.shrink_height();
      layout.shrink_width();
      layout.fill_parents_padding();
      layout.placeholder_styling();
      layout.labelize_placeholder('.labelized_placeholder');
      layout.horizontal_centralize('.horizontal_centralize');
      layout.vertical_centralize('.wm-checkbox,\
      .vertical_centralize, [type=radio] ~ label,\
      [type=checkbox] ~ label');
      Positioner.parse_positionable_objects();
      position_labels();
      layout.reset_scrollers();
      if (_this.debug) {
        return console.log("LO: Global Adjustments");
      }
    }
  };

  position_labels = function() {};

  positioner = function() {
    return $('[data-position-pos]').each(function() {
      var pos, rel, t;
      t = $(this);
      pos = t.attr("data-position-pos");
      rel = $(t.attr("data-position-rel"));
      if (rel.length === 0) {
        rel = $('[name=' + t.attr('for') + ']');
      }
      if (is_string(pos)) {
        if (pos === 'bottom') {
          return layout.positionOnBottom(t, rel);
        } else if (pos === 'top') {
          return layout.positionOnTop(t, rel);
        }
      }
    });
  };

  layout.adjust_image_size = function(selector) {
    return $(selector).load(function(e) {
      var img, img_prop, wrp, wrp_prop;
      img = $(e.target);
      wrp = img.parent();
      img_prop = img.width() / img.height();
      wrp_prop = wrp.width() / wrp.height();
      if (img_prop <= wrp_prop) {
        img.height(wrp.height());
        img.width(img.height() * img_prop);
      } else {
        img.width(wrp.width());
        img.height(img.width() / img_prop);
      }
      return img.fadeIn();
    });
  };

  layout.search_icon = function() {
    var icon, icon_os, input, os;
    input = $('#search');
    icon = $('#search_icon');
    os = input.offset();
    icon_os = {};
    icon_os.top = os.top + (input.outerHeight() - icon.height()) / 2;
    icon_os.left = os.left + input.width() - icon.width();
    return icon.offset(icon_os);
  };

  layout.add_scroller = function(selector) {
    return _this.scrollers[selector] = new Scroller(selector);
  };

  layout.reset_scrollers = function() {};

  layout.labelize_placeholder = function(container) {
    return $('[data-placeholder]', $(container)).each(function() {
      var label, t;
      t = $(this);
      label = $('[for=' + t.attr('name') + ']');
      if (label.length > 0) {
        label.addClass('tip_tool_label');
        return layout.positionOnTop(label, t);
      } else {
        return layout.positionOnTop($('<label class="tip_tool_label">' + t.attr('data-placeholder') + '</label>'), t);
      }
    });
  };

  _placeholder_styling = function(e) {
    var t;
    t = $(e.target);
    if (t.val() === '') {
      return t.removeClass('not_empty');
    } else {
      return t.addClass('not_empty');
    }
  };

  layout.placeholder_styling = function() {};

  layout.checkbox = function() {
    var cbs;
    cbs = $('[type=checkbox]:not(.wmcheckbox-ized, .hidden),\
          [type=radio]:not(.wmcheckbox-ized, .hidden)');
    return cbs.each(function() {
      return WMCheckbox.create($(this));
    });
  };

  layout.fill_parents_padding = function() {
    return $('.fill_parents_padding').each(function() {
      var p, t;
      t = $(this);
      p = t.parent();
      t.height(p.outerHeight());
      t.css('margin-top', '-' + p.css('padding-top'));
      return t.css('line-height', t.height() + 'px');
    });
  };

  layout.horizontal_centralize = function(selector, method) {
    if (method == null) {
      method = 'margin';
    }
    if (method === 'margin') {
      return $(selector).each(function() {
        return $(this).css('position', 'relative').css('margin-left', -$(this).width() / 1.9).css('left', '50%');
      });
    } else if (method === 'pos') {
      return $(selector).each(function() {
        var p, p_left, t;
        t = $(this);
        p = t.parent();
        p_left = p.offset().left;
        return t.offset({
          left: p_left + p.outerWidth() / 2 - t.innerWidth() / 2
        });
      });
    }
  };

  layout.vertical_centralize = function(selector) {
    return $(selector).each(function() {
      var p, p_top, t;
      t = $(this);
      p = t.parent();
      p_top = p.offset().top;
      return t.offset({
        top: p_top + p.outerHeight() / 2 - t.innerHeight() / 2
      });
    });
  };

  window.layout.width_full = function() {
    return $('.width_full').each(function() {
      var f, filler, fillers_width, fixed, fixed_total_width, remaining_width, _i, _len;
      fixed = $(this).children('.width_fixed');
      filler = $(this).children('.width_filler');
      fixed_total_width = 0;
      for (_i = 0, _len = fixed.length; _i < _len; _i++) {
        f = fixed[_i];
        fixed_total_width += $(f).outerWidth();
      }
      remaining_width = $(this).width() - fixed_total_width;
      fillers_width = remaining_width / filler.length;
      return filler.innerWidth(fillers_width);
    });
  };

  window.layout.shrink_height = function() {
    return $('.shrink_height').each(function() {
      var available_height, candidate_height, t, used_by_siblings;
      t = $(this);
      available_height = t.parent().innerHeight();
      used_by_siblings = 0;
      t.siblings().each(function() {
        var u;
        u = $(this);
        return used_by_siblings += u.outerHeight();
      });
      candidate_height = available_height - used_by_siblings;
      if (!(candidate_height > t.outerHeight())) {
        return t.outerHeight(candidate_height);
      }
    });
  };

  window.layout.shrink_width = function() {
    return $('.shrink_width').each(function() {
      var available_width, candidate_width, t, used_by_siblings;
      t = $(this);
      available_width = t.parent().innerWidth();
      used_by_siblings = 0;
      t.siblings().each(function() {
        var u;
        u = $(this);
        return used_by_siblings += u.outerWidth();
      });
      candidate_width = available_width - used_by_siblings;
      console.log(candidate_width, available_width, used_by_siblings);
      if (!(candidate_width > t.outerWidth())) {
        return t.outerWidth(candidate_width);
      }
    });
  };

  window.layout.height_full = function(elements) {
    if (elements == null) {
      elements = $('.height_full');
    }
    console.log('told ia it isnt cald');
    return elements.each(function() {
      var container_height, f, filler, filler_height_delta, filler_shrink, fillers_height, fixed, fixed_total_height, min_height, remaining_height, total_fixed_height, _i, _len;
      if (layout.debug) {
        console.log('----- layout . height_full -----');
      }
      if (layout.debug) {
        console.log('Adjusting height for', $(this).outerHeight(), $(this));
      }
      fixed = $(this).children('.height_fixed');
      filler = $(this).children('.height_filler, .line_height_filler');
      filler_shrink = filler.filter('.height_filler_shrink');
      fixed_total_height = 0;
      for (_i = 0, _len = fixed.length; _i < _len; _i++) {
        f = fixed[_i];
        if (layout.debug) {
          console.log('fixed_height_elem', $(f).outerHeight(), $(f));
        }
        fixed_total_height += $(f).outerHeight();
      }
      container_height = $(this).outerHeight();
      remaining_height = container_height - fixed_total_height;
      fillers_height = remaining_height / filler.length;
      filler_height_delta = Math.abs(filler.outerHeight() - fillers_height);
      min_height = filler.css('min-height');
      if ((min_height != null) && min_height > fillers_height) {
        filler.outerHeight(min_height);
      } else {
        filler.outerHeight(fillers_height);
      }
      if (layout.debug) {
        console.log('fillers height: ', filler, fillers_height);
      }
      if (layout.debug) {
        console.log('fixed total height', fixed_total_height);
      }
      if (layout.debug) {
        console.log('remaining height', remaining_height);
      }
      filler.each(function() {
        if ($(this).hasClass('line_height_filler')) {
          return $(this).css('line-height', $(this).height() + 'px');
        }
      });
      total_fixed_height = 0;
      return $('> *', this).each(function() {
        return total_fixed_height += $(this).outerHeight();
      });
    });
  };

  layout.blockContainer = function(container) {
    return container.html(JSV.common.ajax_loader());
  };

  layout.blockScreen = function(msg) {
    if (msg == null) {
      msg = 'Please wait...';
    }
    $('body').after(JSV.common.message(msg, "loading"));
    layout.vertical_centralize('.overlay_message_content');
    return layout.vertical_centralize('.overlay_message_text');
  };

  layout.m = function(text, type, callback) {
    var html;
    if (type == null) {
      type = "error";
    }
    if (callback == null) {
      callback = null;
    }
    html = $(JSV.common.message(text, type));
    $('body').after(html);
    layout.vertical_centralize('.overlay_message_content');
    return html.one('click', function() {
      return html.one('click', function() {
        if (callback != null) {
          callback();
        }
        return $(this).remove();
      });
    });
  };

  layout.defaultError = function() {
    return layout.m('An error has ocurred');
  };

  layout.unblockScreen = function() {
    return $('#overlay').remove();
  };

  layout.positionOnTop = function(element, target) {
    var fp;
    target.before(element);
    fp = target.offset();
    if (fp != null) {
      return element.offset({
        top: fp.top - element.outerHeight(),
        left: fp.left
      });
    }
  };

  layout.positionOnBottom = function(element, target) {
    var fp;
    target.after(element);
    fp = target.offset();
    if (fp != null) {
      return element.offset({
        top: fp.top + target.outerHeight(),
        left: fp.left
      });
    }
  };

  layout.positionOnTopRight = function(element, target) {
    var fp;
    target.before(element);
    fp = target.offset();
    if (fp != null) {
      return element.offset({
        top: fp.top - element.height(),
        left: fp.left + target.outerWidth() - element.outerWidth()
      });
    }
  };

  layout.icon_filler = function(container) {};

}).call(this);
