// Generated by CoffeeScript 1.4.0
(function() {
  var _this = this;

  this.Navigation = {
    init: function() {
      this.current_view = '__map__';
      this.navigating = false;
      this.debug = is_debug('navigation');
      this.route_stack = [];
      this.current_args = {};
      return $(document).on('click', '[data-navigation]', this.navigation_handler);
    },
    refresh: function() {
      return _this.follow_route(_this.current_view, false, true);
    },
    is_current: function(route) {
      if (_this.debug) {
        console.log('NV: is_current?', _this.current_view, route);
      }
      return _this.current_view === route;
    },
    is_map: function(route) {
      return _this.current_view === '__map__';
    },
    back: function() {
      return _this.follow_route('__back__', true);
    },
    show_map: function() {
      if (!_this.is_map()) {
        return _this.follow_route('__map__');
      }
    },
    is_last_view: function(route) {
      return _this.last_view() === route;
    },
    last_view: function() {
      if (_this.route_stack.length >= 2) {
        return _this.route_stack[_this.route_stack.length - 1];
      }
    },
    is_navigating: function() {
      return this.navigating;
    },
    navigation_handler: function(e) {
      var route, t, _current_args;
      if (_this.is_navigating()) {
        if (_this.debug) {
          console.log('NV: Navigation denied on [navigation_handler]: ', _this.navigating);
        }
        return;
      }
      t = ensure($(e.target), '[data-navigation]');
      _current_args = t.attr('data-navigation-args');
      if (_current_args != null) {
        _this.current_args = JSV.set_parse_args(_current_args);
      }
      route = t.attr('data-navigation');
      if (_this.debug) {
        console.log('NV: Navigation triggered: ', t, route);
      }
      return _this.route_handler(route);
    },
    is_show_map_route: function(route) {
      return /^menu\..*/.test(route);
    },
    route_handler: function(route) {
      if (_this.is_current(route)) {
        if (_this.debug) {
          console.log('NV: Refresh');
        }
        if (_this.is_show_map_route(route)) {
          return _this.follow_route('__map__');
        } else {
          return _this.follow_route(route, false, true);
        }
      } else if (_this.is_last_view(route)) {
        if (_this.debug) {
          console.log('NV: is_last_view: ');
        }
        return _this.follow_route('__back__', true);
      } else {
        if (_this.debug) {
          console.log('NV: not is_current and not is_last: ', route);
        }
        return _this.follow_route(route);
      }
    },
    navigation_complete: function() {
      _this.navigating = false;
      if (_this.debug) {
        return console.log('NV: Navigation Complete ');
      }
    },
    follow_route: function(route, back, refresh) {
      var content;
      if (back == null) {
        back = false;
      }
      if (refresh == null) {
        refresh = false;
      }
      if (_this.is_navigating() && !back) {
        if (_this.debug) {
          console.log('NV: Navigation denied on [follow_route]: ', route, _this.navigating, back);
        }
        return;
      }
      _this.navigating = true;
      if (_this.debug) {
        console.log('NV: Following route: ' + route);
      }
      if (_this.debug && _this.back) {
        console.log('NV: (As back)');
      }
      if (_this.debug) {
        console.log('NV: From: ' + _this.current_view);
      }
      if (route === '__map__') {
        _this.route_stack = [];
      } else if (route === '__back__') {
        _this.follow_route(_this.route_stack.pop(), true);
        return;
      } else if (route !== '__back__' && !back) {
        _this.route_stack.push(_this.current_view);
      }
      content = _router.route(route, back, refresh);
      if (play_list(content.before_route)) {
        if (!(route === '__back__' || back)) {
          _this.current_view = _this.route_stack.pop();
        }
        _this.navigation_complete();
        return;
      }
      if (content.error_404 == null) {
        if (route !== '__back__') {
          _this._forward_current_view = route;
        }
        _v(content);
        if (route !== '__back__') {
          _this.current_view = route;
        }
      } else {
        _this.current_view = _this.route_stack.pop();
        _this.navigation_complete();
        if (_this.debug) {
          console.log('Route: Route not found: ' + route + '[', _this.routes, ']');
        }
      }
      if (_this.debug) {
        return console.log('NV: Route Stack:', _this.route_stack);
      }
    }
  };

}).call(this);
