// Generated by CoffeeScript 1.4.0
(function() {
  var __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  this.Activity = {
    init: function() {
      Activity.activities_list_view();
      return Activity.activity_picker();
    },
    name: 'Activity',
    url: {
      update: 'activity/all'
    },
    data: {
      update: function() {
        return {
          last_seen_obj: 0
        };
      }
    },
    set_icon_path: function(activity_index) {},
    activities_list_view: function() {
      var elem;
      elem = $('[data-activity-icon-list]');
      return elem.live('click', function(e) {
        var a, activities, t;
        t = ensure($(e.target), '[data-activity-icon-list]');
        activities = JSV.parse_args(t.attr('data-activity-icon-list'));
        return new ListView({
          html: [
            (function() {
              var _i, _len, _results;
              _results = [];
              for (_i = 0, _len = activities.length; _i < _len; _i++) {
                a = activities[_i];
                _results.push('<div>\
                  <span class=activity-name">' + a.name + '</span></div>\
                  <img class="activity-icon" src="' + base_url(a.icon_url) + '" />');
              }
              return _results;
            })()
          ].join().replace(/,/g, ''),
          add_class: 'activity-list-view'
        });
      });
    },
    set_activity_picker_values: function(activities, display, value) {
      var a;
      if (display == null) {
        display = '#activity_display';
      }
      if (value == null) {
        value = '#activity_value';
      }
      $(display).val(((function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = activities.length; _i < _len; _i++) {
          a = activities[_i];
          _results.push(a.name);
        }
        return _results;
      })()).join(', '));
      return $(value).val(((function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = activities.length; _i < _len; _i++) {
          a = activities[_i];
          _results.push(a.id);
        }
        return _results;
      })()).join(','));
    },
    activity_picker: function() {
      var callback,
        _this = this;
      callback = function(e) {
        var a, args, input, ls, mode, selected, values;
        input = $(e.target);
        if (ListSelector.show_if_exists(input)) {
          return;
        }
        Activity.update_local_info();
        mode = input.attr('data-activity-picker-mode') || 'single';
        args = {
          add_class: 'list-selector-activities',
          container: '#wrapper',
          display: '#activity_display',
          value: '#activity_value',
          close_politics: 'fade',
          mode: mode
        };
        selected = $(args.value).val().split(',');
        values = (function() {
          var _i, _len, _ref, _ref1, _results;
          _ref = Activity.all();
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            a = _ref[_i];
            _results.push({
              html_selected: '<span class=activity-name">' + a.name + '</span>\
                        <img class="activity-icon" src="' + a.icon_selected_url + '" />',
              html_unselected: '<span class=activity-name">' + a.name + '</span>\
                          <img class="activity-icon" src="' + a.icon_url + '" />',
              selected: (_ref1 = a.id, __indexOf.call(selected, _ref1) >= 0),
              value: a.id,
              display: a.name
            });
          }
          return _results;
        })();
        return ls = new ListSelector(input, args, values);
      };
      return $('.activity_picker').live('focus', callback);
    },
    update_local_info: function() {
      var activity, data, max_date;
      layout.blockScreen('Getting activities...');
      data = _nw.async_request('activity/all');
      if (data.activities.length !== 0) {
        max_date = ((function() {
          var _i, _len, _ref, _results;
          _ref = data.activities;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            activity = _ref[_i];
            _results.push(activity.updated_at);
          }
          return _results;
        })()).reduce(function(a, b) {
          if (a > b) {
            return a;
          } else {
            return b;
          }
        });
      }
      _db.set('activities', data.activities);
      _db.set('last_seen_activity', max_date);
      return layout.unblockScreen();
    },
    callback: {
      update: function(data) {
        var activity, max_date, _i, _len, _ref;
        if (data.activities.length !== 0) {
          max_date = ((function() {
            var _i, _len, _ref, _results;
            _ref = data.activities;
            _results = [];
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              activity = _ref[_i];
              _results.push(activity.updated_at);
            }
            return _results;
          })()).reduce(function(a, b) {
            if (a > b) {
              return a;
            } else {
              return b;
            }
          });
          _db.set('last_seen_obj.activity', max_date);
          _ref = data.activities;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            activity = _ref[_i];
            activity.icon_path = save_remote_file(activity.icon, function(f) {});
          }
          return _db.set('activities', data.activities);
        }
      }
    },
    all: function() {
      return _db.get('activities');
    }
  };

}).call(this);
