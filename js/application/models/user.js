// Generated by CoffeeScript 1.4.0
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  this.User = (function() {

    function User(args) {
      var _this = this;
      this.args = args;
      this.keep_logged = __bind(this.keep_logged, this);

      this.accept_friendship_request = __bind(this.accept_friendship_request, this);

      this.poke = __bind(this.poke, this);

      this.request_friendship = __bind(this.request_friendship, this);

      this.is_logged = __bind(this.is_logged, this);

      this.logout = __bind(this.logout, this);

      this.login = __bind(this.login, this);

      this.first_login = __bind(this.first_login, this);

      this.alternative_login = __bind(this.alternative_login, this);

      this.register_ajax_submit = __bind(this.register_ajax_submit, this);

      this.login_ajax_submit = __bind(this.login_ajax_submit, this);

      this.update_ajax_submit = __bind(this.update_ajax_submit, this);

      this.check_remote_session = __bind(this.check_remote_session, this);

      this.get_local_info = __bind(this.get_local_info, this);

      this.get_user_location_name = __bind(this.get_user_location_name, this);

      this.update_local_info = __bind(this.update_local_info, this);

      this.friends = __bind(this.friends, this);

      this.friendship_requests = __bind(this.friendship_requests, this);

      this.get_profile_picture = __bind(this.get_profile_picture, this);

      this.set_title = __bind(this.set_title, this);

      this.get_current_user = __bind(this.get_current_user, this);

      this.set_current_user = __bind(this.set_current_user, this);

      this.view_more_options = __bind(this.view_more_options, this);

      this.debug = is_debug('model__user');
      $('#user_logout').live('click', function() {
        _user.logout(_this.args.logout_callback || null);
        return _nav.show_map();
      });
      $('[data-action-request_friendship]').live('click', function(e) {
        var t;
        t = ensure($(e.target), '[data-action-request_friendship]');
        return _this.request_friendship(t.attr('data-action-request_friendship'));
      });
      $('[data-action-accept_friendship_request]').live('click', function(e) {
        var t;
        t = ensure($(e.target), '[data-action-accept_friendship_request]');
        return _this.accept_friendship_request(t.attr('data-action-accept_friendship_request'));
      });
      $('[data-action-poke]').live('click', function(e) {
        var t;
        t = ensure($(e.target), '[data-action-poke]');
        return _this.poke(t.attr('data-action-poke'));
      });
      this.friend_picker();
      this.invite_friend_picker();
    }

    User.prototype.view_more_options = function() {
      return new ListView({
        html: JSV.user.view_options(this.get_current_user()),
        title: 'More Options',
        on_show: InterfaceBindings.user.view_user_more_options
      });
    };

    User.prototype.set_current_user = function(user) {
      return this.current_user = user;
    };

    User.prototype.get_current_user = function() {
      return this.current_user || null;
    };

    User.prototype.set_friend_picker_values = function(display, value) {
      var f, friends;
      if (display == null) {
        display = '#friend_display';
      }
      if (value == null) {
        value = '#friend_value';
      }
      friends = this.friends();
      $(display).val(((function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = friends.length; _i < _len; _i++) {
          f = friends[_i];
          _results.push(f.name);
        }
        return _results;
      })()).join(','));
      return $(value).val(((function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = friends.length; _i < _len; _i++) {
          f = friends[_i];
          _results.push(f.id);
        }
        return _results;
      })()).join(','));
    };

    User.prototype.set_invite_friend_picker_values = function(invited_ids, already_invited) {
      var f, friends, invited_friends_ids;
      if (already_invited == null) {
        already_invited = '#invited_friends';
      }
      friends = this.friends();
      invited_friends_ids = intersection((function() {
        var _i, _len, _ref, _results;
        _ref = this.friends();
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          f = _ref[_i];
          _results.push(f.id);
        }
        return _results;
      }).call(this), invited_ids);
      return $(already_invited).val(invited_friends_ids.join(','));
    };

    User.prototype.set_title = function() {
      if (this.user_info != null) {
        return document.title = this.user_info.name;
      }
    };

    User.prototype.get_profile_picture = function() {
      return base_url('user/get_profile_picture');
    };

    User.prototype.invite_friend_picker = function() {
      var callback, input,
        _this = this;
      input = $('.invite_friend_picker');
      callback = function(e) {
        var args, f, friends, invited, ls, values;
        if ($('.list-selector-invite-friends').length > 0) {
          $('.list-selector-invite-friends').parents('.list-selector-container').fadeIn();
          return;
        }
        friends = _this.friends();
        if (friends == null) {
          layout.m('You don\'t have any more friends to invite', 'notice');
          return;
        }
        args = {
          add_class: 'list-selector-invite-friends',
          container: '#wrapper',
          display: '#friend_display',
          value: '#friend_value',
          close_politics: 'fade',
          sort: "disabled_last",
          on_create: function() {
            return layout.adjust_image_size('.list-selector-invite-friends .size_adjustable');
          }
        };
        invited = $('#invited_friends').val().split(',');
        values = (function() {
          var _i, _len, _ref, _results;
          _results = [];
          for (_i = 0, _len = friends.length; _i < _len; _i++) {
            f = friends[_i];
            _results.push({
              html_selected: '<span class="list-item-photo-wrapper">\
                          <img class="user-photo size_adjustable" src="' + f.photo_url + '" />\
                        </span>\
                        <span class=user-name">' + f.name + '</span>',
              html_unselected: '<span class="list-item-photo-wrapper">\
                            <img class="user-photo size_adjustable" src="' + f.photo_url + '" />\
                          </span>\
                          <span class=user-name">' + f.name + '</span>',
              disabled: (_ref = f.id, __indexOf.call(invited, _ref) >= 0),
              value: f.id,
              display: f.name
            });
          }
          return _results;
        })();
        return ls = new ListSelector(input, args, values);
      };
      return input.live('focus', callback);
    };

    User.prototype.friend_picker = function() {
      var callback, input,
        _this = this;
      input = $('.friend_picker');
      callback = function(e) {
        var args, f, friends, ls, values;
        if ($('.list-selector-friends').length > 0) {
          $('.list-selector-friends').parents('.list-selector-container').fadeIn();
          return;
        }
        friends = _this.friends();
        if (friends == null) {
          layout.m('You don\'t have any friend to invite', 'notice');
          return;
        }
        args = {
          add_class: 'list-selector-friends',
          container: '#wrapper',
          display: '#friend_display',
          value: '#friend_value',
          close_politics: 'fade',
          on_create: function() {
            return layout.adjust_image_size('.list-selector-friends .size_adjustable');
          }
        };
        values = (function() {
          var _i, _len, _results;
          _results = [];
          for (_i = 0, _len = friends.length; _i < _len; _i++) {
            f = friends[_i];
            _results.push({
              html_selected: '<span class="list-item-photo-wrapper">\
                          <img class="user-photo size_adjustable" src="' + f.photo_url + '" />\
                        </span>\
                        <span class=user-name">' + f.name + '</span>',
              html_unselected: '<span class="list-item-photo-wrapper">\
                            <img class="user-photo size_adjustable" src="' + f.photo_url + '" />\
                          </span>\
                          <span class=user-name">' + f.name + '</span>',
              selected: false,
              value: f.id,
              display: f.name
            });
          }
          return _results;
        })();
        return ls = new ListSelector(input, args, values);
      };
      return input.live('focus', callback);
    };

    User.prototype.friendship_requests = function() {
      this.user_info.requests = _nw.async_request('user/get_requesters');
      return this.user_info.requests;
    };

    User.prototype.friends = function() {
      this.user_info.friends = _nw.async_request('user/get_friends');
      return this.user_info.friends;
    };

    User.prototype.update_local_info = function() {
      var user_info;
      layout.blockScreen('Updating local data...');
      user_info = _nw.async_request('user/update_session_data', {
        keep_logged_in: this.user_info.keep_logged_in
      });
      if ((user_info != null) && (this.user_info != null)) {
        if (this.is_logged()) {
          user_info.keep_logged_in = user_info.keep_logged_in || this.user_info.keep_logged_in;
        }
        this.login(user_info);
      } else {
        layout.m('Something went wrong! Please log in again.', 'error', function() {
          return _nav.route_handler('user.login');
        });
      }
      return layout.unblockScreen();
    };

    User.prototype.get_user_location_name = function() {
      var user_info;
      user_info = this.get_local_info();
      if ((user_info.location != null) && (user_info.location.location != null)) {
        return user_info.location.location;
      }
      return '';
    };

    User.prototype.get_local_info = function() {
      return this.user_info;
    };

    User.prototype.check_remote_session = function(args) {
      var response;
      this.user_info = _db.get('user_info');
      if ((this.user_info != null) && this.user_info.keep_logged_in === true) {
        layout.blockScreen('Checking remote session');
        response = (_nw.async_request('user/confirm_login', {
          keep_logged_in: this.user_info.keep_logged_in,
          email: this.user_info.email,
          password: _db.get('life_of_pi')
        })) || {};
        layout.unblockScreen();
        response.checking_remote_session = true;
        this.login_ajax_submit().success(response);
        if (!((response.data != null) || !(args.not_logged_callback != null))) {
          args.not_logged_callback();
        }
      } else {
        if (args.not_logged_callback != null) {
          args.not_logged_callback();
        }
      }
      if (args.after_check_callback) {
        return args.after_check_callback();
      }
    };

    User.prototype.update_ajax_submit = function() {
      var _this = this;
      return {
        success: function(response, status, xhr, form) {
          if (response != null) {
            _this.login(response.data.user);
            return layout.m('Profile successfully updated!', 'notice', function() {
              return _nav.route_handler('menu.settings');
            });
          }
        }
      };
    };

    User.prototype.login_ajax_submit = function() {
      var _this = this;
      return {
        success: function(response, status, xhr, form) {
          var pwd;
          if (status == null) {
            status = null;
          }
          if (xhr == null) {
            xhr = null;
          }
          if (form == null) {
            form = null;
          }
          if ((response != null) && (response.data != null) && response.data.user !== false) {
            pwd = $('#password');
            if (pwd.length > 0) {
              _db.set('life_of_pi', pwd.val());
            }
            if (!response.checking_remote_session) {
              _this.first_login(response.data.user);
            }
            _this.set_title();
            return _nav.show_map();
          } else if ((response != null) && !response.checking_remote_session) {
            return layout.m('Wrong login or password', 'error');
          } else {
            return _nav.follow_route('user.login');
          }
        }
      };
    };

    User.prototype.register_ajax_submit = function() {
      var _this = this;
      return {
        success: function(response, status, xhr, form) {
          if (_this.debug) {
            console.log('response: ', response, status, xhr, form);
          }
          if (response.success) {
            return layout.m('A confirmation e-mail has been sent to this e-mail address', 'notice', function() {
              return _nav.route_handler('user.login');
            });
          } else {
            if (response.errors != null) {
              return layout.m('This e-mail has already been used');
            } else {
              return layout.m('There was an error on your signup');
            }
          }
        }
      };
    };

    User.prototype.alternative_login = function(alternative_login_info, alternative_login_name) {
      var response;
      if (!this.is_logged()) {
        layout.blockScreen('Please wait');
        if (alternative_login_name === 'facebook') {
          response = _nw.async_request('user/facebook_login', {
            facebook_id: alternative_login_info.auth_response.userID,
            access_token: alternative_login_info.auth_response.accessToken
          });
          this.login(response.data.user);
          _nav.show_map();
        }
        return layout.unblockScreen();
      }
    };

    User.prototype.first_login = function(user_info) {
      this.login(user_info);
      if (is_function(this.args.login_callback)) {
        return this.args.login_callback();
      }
    };

    User.prototype.login = function(user_info) {
      _db.set('user_info', user_info);
      return this.user_info = _db.get('user_info');
    };

    User.prototype.logout = function(args) {
      _db.unset('user_info');
      delete this.user_info;
      if (is_function(this.args.logout_callback)) {
        return this.args.logout_callback();
      }
    };

    User.prototype.is_logged = function() {
      return this.user_info != null;
    };

    User.prototype.request_friendship = function(friend_id) {
      if (friend_id === this.user_info.id) {
        layout.m('You are always moving with yourself!', 'notice');
      }
      layout.blockScreen('Requesting friendship');
      _nw.async_request('user/request_friendship', {
        friend_id: friend_id
      });
      layout.unblockScreen();
      return layout.m('Friendship request successful!', 'success', function() {
        _nav.current_args = {
          id: friend_id
        };
        return _nav.refresh();
      });
    };

    User.prototype.poke = function(user_id) {
      console.log(user_id);
      return _nw.request('user/poke', {
        user_id: user_id
      });
    };

    User.prototype.accept_friendship_request = function(friend_id) {
      layout.blockScreen('Accepting friendship');
      _nw.async_request('user/accept_friendship_request', {
        friend_id: friend_id
      });
      layout.unblockScreen();
      return layout.m('You are now moving with this user!', 'success', function() {
        _nav.current_args = {
          id: friend_id
        };
        return _nav.refresh();
      });
    };

    User.prototype.keep_logged = function() {
      if (this.is_logged()) {
        if (!this.user_info.keep_logged_in) {
          return this.logout();
        } else {
          return this.check_remote_session();
        }
      }
    };

    return User;

  })();

}).call(this);
